/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.myproject.laborprojekt;

import java.util.ArrayList;
import java.util.List;
import java.util.Comparator;
import java.nio.file.Files;
import java.nio.file.Path;
import javax.swing.SwingUtilities;

/**
 *
 * @author istsz
 */
public class GUI extends javax.swing.JFrame {

    private java.util.List<Song> songs;
    private List<Song> originalSongs;
    private String workoutType;
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(GUI.class.getName());

    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        workoutSelectComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[]{
            "RUNNING", "HIIT", "CARDIO", "YOGA", "WEIGHTLIFTING"
        }));
        jProgressBar1.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();
        workoutSelectComboBox = new javax.swing.JComboBox<>();
        playlistGeneratorButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        SortAZButton = new javax.swing.JButton();
        SortDescPopButton = new javax.swing.JButton();
        SortUndoButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        saveToTxtButton = new javax.swing.JButton();
        loadFromTxtButton = new javax.swing.JButton();
        SortDescBPMButton = new javax.swing.JButton();
        SortZAButton = new javax.swing.JButton();
        SortAscPopButton = new javax.swing.JButton();
        SortAscBPMButton = new javax.swing.JButton();
        randomSongButton = new javax.swing.JButton();
        searchSongButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 0, 51));

        jProgressBar1.setForeground(new java.awt.Color(51, 204, 0));

        jLabel1.setFont(new java.awt.Font("Copperplate Gothic Bold", 2, 12)); // NOI18N
        jLabel1.setText("Workout Type:");

        workoutSelectComboBox.setFont(new java.awt.Font("Perpetua", 0, 12)); // NOI18N
        workoutSelectComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        workoutSelectComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                workoutSelectComboBoxActionPerformed(evt);
            }
        });

        playlistGeneratorButton.setText("Generate Playlist");
        playlistGeneratorButton.setName("playlistGenerateButton"); // NOI18N
        playlistGeneratorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playlistGeneratorButtonActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(jTextArea1);

        jTextField1.setFont(new java.awt.Font("Bodoni MT", 0, 12)); // NOI18N
        jTextField1.setText("Playlist size...");
        jTextField1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField1MouseClicked(evt);
            }
        });

        SortAZButton.setText("Sort A-Z");
        SortAZButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortAZButtonActionPerformed(evt);
            }
        });

        SortDescPopButton.setText("Sort by Desc. Popularity");
        SortDescPopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortDescPopButtonActionPerformed(evt);
            }
        });

        SortUndoButton.setText("Undo Sorting");
        SortUndoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortUndoButtonActionPerformed(evt);
            }
        });

        clearButton.setFont(new java.awt.Font("Segoe UI Black", 0, 12)); // NOI18N
        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        saveToTxtButton.setText("Save playlist to TXT");
        saveToTxtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveToTxtButtonActionPerformed(evt);
            }
        });

        loadFromTxtButton.setText("Load from TXT");
        loadFromTxtButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadFromTxtButtonActionPerformed(evt);
            }
        });

        SortDescBPMButton.setText("Sort by Desc. BPM");
        SortDescBPMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortDescBPMButtonActionPerformed(evt);
            }
        });

        SortZAButton.setText("Sort Z-A");
        SortZAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortZAButtonActionPerformed(evt);
            }
        });

        SortAscPopButton.setText("Sort by Asc. Popularity");
        SortAscPopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortAscPopButtonActionPerformed(evt);
            }
        });

        SortAscBPMButton.setText("Sort by Asc. BPM");
        SortAscBPMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortAscBPMButtonActionPerformed(evt);
            }
        });

        randomSongButton.setText("Choose Random Song");
        randomSongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomSongButtonActionPerformed(evt);
            }
        });

        searchSongButton.setText("Search Song");
        searchSongButton.setName("songSearchButton"); // NOI18N
        searchSongButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchSongButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(44, 44, 44)
                                .addComponent(workoutSelectComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(playlistGeneratorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(SortZAButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(SortDescPopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(SortDescBPMButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(clearButton))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(SortAZButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(SortAscPopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(SortAscBPMButton, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(191, 191, 191)
                                        .addComponent(saveToTxtButton, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(192, 192, 192)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(loadFromTxtButton, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(SortUndoButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 941, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(randomSongButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchSongButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(workoutSelectComboBox)
                                .addComponent(jTextField1)
                                .addComponent(playlistGeneratorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(searchSongButton))
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(86, 86, 86)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(randomSongButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SortAZButton)
                    .addComponent(SortAscPopButton)
                    .addComponent(SortAscBPMButton)
                    .addComponent(saveToTxtButton)
                    .addComponent(loadFromTxtButton))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(SortDescPopButton)
                        .addComponent(SortDescBPMButton)
                        .addComponent(SortZAButton))
                    .addComponent(SortUndoButton)
                    .addComponent(clearButton))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void workoutSelectComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_workoutSelectComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_workoutSelectComboBoxActionPerformed
    // Playlist generating
    private void playlistGeneratorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playlistGeneratorButtonActionPerformed

        workoutType = (String) workoutSelectComboBox.getSelectedItem();

        int size;

        try {
            size = Integer.parseInt(jTextField1.getText());
        } catch (NumberFormatException e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Invalid playlist size!", "Warning", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        jProgressBar1.setVisible(true);
        jProgressBar1.setMinimum(0);
        jProgressBar1.setMaximum(size);
        jProgressBar1.setValue(0);

        new Thread(new Runnable() {
            @Override
            public void run() {

                String seed = "878dadea-33c5-4c08-bdb9-e2b117475a99";

                double minTempo, maxTempo;
                switch (workoutType) {
                    case "RUNNING":
                        minTempo = 120;
                        maxTempo = 140;
                        break;
                    case "HIIT":
                        minTempo = 140;
                        maxTempo = 180;
                        break;
                    case "CARDIO":
                        minTempo = 110;
                        maxTempo = 130;
                        break;
                    case "YOGA":
                        minTempo = 60;
                        maxTempo = 80;
                        break;
                    case "WEIGHTLIFTING":
                        minTempo = 130;
                        maxTempo = 140;
                        break;
                    default:
                        minTempo = 100;
                        maxTempo = 120;
                        break;
                }

                songs = new ArrayList<>();

                for (int i = 0; i < size; i++) {
                    double targetTempo = minTempo + Math.random() * (maxTempo - minTempo);
                    List<Song> newSongs = ApiService.getSongsByTempo(targetTempo, List.of(seed), 1);

                    if (!newSongs.isEmpty()) {
                        Song candidate = newSongs.get(0);

                        boolean duplicateSong = false;

                        for (Song s : songs) {
                            if (s.getTitle().equals(candidate.getTitle()) && s.getArtist().equals(candidate.getArtist())) {
                                duplicateSong = true;
                                break;
                            }
                        }
                        if (!duplicateSong) {
                            songs.add(candidate);

                            // progress bar 
                            final int progress = songs.size();
                            javax.swing.SwingUtilities.invokeLater(new Runnable() {
                                @Override
                                public void run() {
                                    jProgressBar1.setValue(progress);
                                }
                            });
                        } else {
                            i--;
                            continue;

                        }

                    } else {
                        int choice = javax.swing.JOptionPane.showConfirmDialog(
                                null,
                                "No song found for tempo " + String.format("%.1f", targetTempo) + ". Regenerate?",
                                "Song missing",
                                javax.swing.JOptionPane.YES_NO_OPTION
                        );
                        if (choice != javax.swing.JOptionPane.YES_OPTION) {
                            break;
                        }
                        i--;
                        continue;
                    }
                }

                javax.swing.SwingUtilities.invokeLater(new Runnable() {
                    @Override
                    public void run() {
                        jProgressBar1.setVisible(false);
                        originalSongs = new ArrayList<>(songs);
                        updateOutputArea();
                    }
                });

            }
        }).start();

    }//GEN-LAST:event_playlistGeneratorButtonActionPerformed
        
    private void jTextField1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField1MouseClicked
        jTextField1.setText("");
    }//GEN-LAST:event_jTextField1MouseClicked
    // A-Z Sort
    private void SortAZButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortAZButtonActionPerformed
        if (songs != null && !songs.isEmpty()) {
            songs.sort(new Comparator<Song>() {
                @Override
                public int compare(Song s1, Song s2) {
                    return s1.getTitle().compareToIgnoreCase(s2.getTitle());
                }
            });
            updateOutputArea();
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Nothing to sort!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SortAZButtonActionPerformed
    // Popularity sort Desc.
    private void SortDescPopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortDescPopButtonActionPerformed
        if (songs != null && !songs.isEmpty()) {
            songs.sort(new Comparator<Song>() {
                @Override
                public int compare(Song s1, Song s2) {
                    return Integer.compare(s2.getPopularity(), s1.getPopularity());
                }
            });
            updateOutputArea();
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Nothing to sort!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SortDescPopButtonActionPerformed
    // Undo sorting
    private void SortUndoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortUndoButtonActionPerformed
        if (originalSongs == null || originalSongs.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Nothing to undo!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        songs = new ArrayList<>(originalSongs);
        updateOutputArea();
    }//GEN-LAST:event_SortUndoButtonActionPerformed
    // Clear screen
    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        if (songs == null || songs.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Nothing to clear!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        jTextArea1.setText("");
        songs = new ArrayList<>();
        originalSongs = new ArrayList<>();
    }//GEN-LAST:event_clearButtonActionPerformed
    // Save to TXT
    private void saveToTxtButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveToTxtButtonActionPerformed
        if (songs == null || songs.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(
                    this,
                    "Nothing to save!",
                    "Error",
                    javax.swing.JOptionPane.ERROR_MESSAGE
            );
            return;
        }

        try {
            savePlaylistToFile(workoutType, songs);
            javax.swing.JOptionPane.showMessageDialog(this, "Playlist saved!", "Info", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception ex) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error saving playlist: " + ex.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_saveToTxtButtonActionPerformed
    /////// Load from TXT ////////
    private void loadFromTxtButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadFromTxtButtonActionPerformed
        /*//if (workoutType == null || workoutType.isEmpty()) {
            //javax.swing.JOptionPane.showMessageDialog(this, "No workout type selected!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
          //  return;
        String filename = javax.swing.JOptionPane.showInputDialog(
            this,
            "Enter filename to load:",
            "Load Playlist",
            javax.swing.JOptionPane.QUESTION_MESSAGE
    );

    if (filename == null || filename.isEmpty()) return; 
        try {
        String content = java.nio.file.Files.readString(java.nio.file.Path.of(filename));
        jTextArea1.setText(content);
    } catch (java.nio.file.NoSuchFileException e) {
        javax.swing.JOptionPane.showMessageDialog(this, "File not found: " + filename, "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
    } catch (Exception e) {
        javax.swing.JOptionPane.showMessageDialog(this, "Error loading file: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
}*/
    }//GEN-LAST:event_loadFromTxtButtonActionPerformed
    // Desc BPM sort //
    private void SortDescBPMButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortDescBPMButtonActionPerformed
        if (songs == null || songs.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Nothing to sort!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        songs.sort(new Comparator<Song>() {
            @Override
            public int compare(Song s1, Song s2) {
                return Double.compare(s2.getBpm(), s1.getBpm());
            }
        });

        updateOutputArea();
    }//GEN-LAST:event_SortDescBPMButtonActionPerformed
    // Asc BPM sort //
    private void SortAscBPMButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortAscBPMButtonActionPerformed
        if (songs == null || songs.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "Nothing to sort!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        songs.sort(new Comparator<Song>() {
            @Override
            public int compare(Song s1, Song s2) {
                return Double.compare(s1.getBpm(), s2.getBpm());
            }
        });

        updateOutputArea();
    }//GEN-LAST:event_SortAscBPMButtonActionPerformed
    // Popularity sort Asc. // 
    private void SortAscPopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortAscPopButtonActionPerformed
        if (songs != null && !songs.isEmpty()) {
            songs.sort(new Comparator<Song>() {
                @Override
                public int compare(Song s1, Song s2) {
                    return Integer.compare(s1.getPopularity(), s2.getPopularity());
                }
            });
            updateOutputArea();
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Nothing to sort!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SortAscPopButtonActionPerformed
    // Z-A Sort
    private void SortZAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortZAButtonActionPerformed
        if (songs != null && !songs.isEmpty()) {
            songs.sort(new Comparator<Song>() {
                @Override
                public int compare(Song s1, Song s2) {
                    return s2.getTitle().compareToIgnoreCase(s1.getTitle());
                }
            });
            updateOutputArea();
        } else {
            javax.swing.JOptionPane.showMessageDialog(this, "Nothing to sort!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SortZAButtonActionPerformed
    // Random Song
    private void randomSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomSongButtonActionPerformed
        if (songs == null || songs.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "No songs to play!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }
        int rand = (int) (Math.random() * songs.size());
        Song randomSong = songs.get(rand);

        randomSong.play();

        javax.swing.JOptionPane.showMessageDialog(this, "Playing: \n" + randomSong.getInfo(), "Choose Random Song", javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_randomSongButtonActionPerformed
    // Search Song
    private void searchSongButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchSongButtonActionPerformed
        if (songs == null || songs.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "No songs available to search!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            return;
        }

        String[] searchOptions = {"BPM", "Popularity", "Artist", "Title"};
        int choice = javax.swing.JOptionPane.showOptionDialog(this, "Search by:", "Search song", javax.swing.JOptionPane.DEFAULT_OPTION, javax.swing.JOptionPane.QUESTION_MESSAGE, null, searchOptions, searchOptions[0]);

        if (choice == -1) {
            return;
        }

        String input = javax.swing.JOptionPane.showInputDialog(this, "Enter value:");

        if (input == null || input.isEmpty()) {
            return;
        }

        List<Song> found = new ArrayList<>();

        switch (choice) {
            case 0: // BPM
                try {
                    double bpm = Double.parseDouble(input);
                    for (Song s : songs) {
                        if ((int) Math.round(s.getBpm()) == (int) Math.round(bpm)) {
                            found.add(s);
                        }
                    }
                } catch (NumberFormatException e) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Invalid BPM value!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                break;

            case 1: // Popularity
                try {
                    int pop = Integer.parseInt(input);
                    for (Song s : songs) {
                        if (s.getPopularity() == pop) {
                            found.add(s);
                        }
                    }
                } catch (NumberFormatException e) {
                    javax.swing.JOptionPane.showMessageDialog(this, "Invalid popularity value!", "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
                    return;
                }
                break;

            case 2: // Artist
                for (Song s : songs) {
                    if (s.getArtist().equalsIgnoreCase(input)) {
                        found.add(s);
                    }
                }
                break;

            case 3: // Title
                for (Song s : songs) {
                    if (s.getTitle().equalsIgnoreCase(input)) {
                        found.add(s);
                    }
                }
                break;

            default:
                return;
        }

        if (found.isEmpty()) {
            javax.swing.JOptionPane.showMessageDialog(this, "No songs found!", "Search Result", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } else {
            String text = "=== Search Results ===\n\n";
            for (Song s : found) {
                text = text + s.getInfo() + "\n";
            }
            javax.swing.JOptionPane.showMessageDialog(this, text, "Search Result", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }


    }//GEN-LAST:event_searchSongButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    private void updateOutputArea() {
        String text = "=== " + workoutType + " Playlist ===\n\n";
        for (int i = 0; i < songs.size(); i++) {
            text = text + " - " + songs.get(i).getInfo() + "\n";
        }
        text += "\nTotal songs: " + songs.size();
        jTextArea1.setText(text);
        jTextArea1.setCaretPosition(0);

    }

    private void savePlaylistToFile(String workoutType, List<Song> songs) throws Exception {
        if (songs == null || songs.isEmpty()) {
            return;
        }

        String filename = workoutType + "_playlist.txt";

        String text = "=== " + workoutType + " Playlist ===\n\n";

        for (int i = 0; i < songs.size(); i++) {
            text = text + " - " + songs.get(i).getInfo() + "\n";
        }

        Files.write(Path.of(filename), text.getBytes());
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

        //</editor-fold>
        /* Create and display the form */
 /*java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new GUI().setVisible(true);
            }
        });
         */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton SortAZButton;
    private javax.swing.JButton SortAscBPMButton;
    private javax.swing.JButton SortAscPopButton;
    private javax.swing.JButton SortDescBPMButton;
    private javax.swing.JButton SortDescPopButton;
    private javax.swing.JButton SortUndoButton;
    private javax.swing.JButton SortZAButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton loadFromTxtButton;
    private javax.swing.JButton playlistGeneratorButton;
    private javax.swing.JButton randomSongButton;
    private javax.swing.JButton saveToTxtButton;
    private javax.swing.JButton searchSongButton;
    private javax.swing.JComboBox<String> workoutSelectComboBox;
    // End of variables declaration//GEN-END:variables
}
